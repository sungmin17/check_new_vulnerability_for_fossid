#!/bin/bash

echo "$(date +"%Y-%m-%d %H:%M:%S") Start to check new vulnerability for fossid" >> log/$(date +"%Y-%m-%d").log
echo -e "$(date +"%Y-%m-%d %H:%M:%S") check DB file\n$(cat db/cve_list.txt)\n" >>  log/$(date +"%Y-%m-%d").log
#get scan lists
curl -X POST --data @request_format/list_scans.json -H "Content-Type: applicatn/json" http://172.16.30.202/api.php | jq -r '[ .data | to_entries[] | .value = .value.code ] | .[] | "\(.value)"' > raw_data/scan_lists.txt

count=0
while read -r scan_code; do
    count=$(($count+1)) 
    echo SCAN CODE : ${scan_code}_$count
    if [[ $scan_code =~ "/" ]]; then
        # "/"가 포함된 경우, 앞에 "\" 추가
        scan_code="${scan_code//\//\\/}"
    fi
    sed "s/@scan_code/${scan_code}/gi" request_format/scan_identified_components.json > raw_data/identified_components.json

    #get identified components
    curl -X POST --data @raw_data/identified_components.json -H "Content-Type: applicatn/json" http://172.16.30.202/api.php | jq '[ .data | to_entries[] | {name: .value.name, version: .value.version} ]' > raw_data/${count}_component_lists.txt
    while read -r name version; do
        if [[ $name =~ "/" ]]; then
            # "/"가 포함된 경우, 앞에 "\" 추가
            name="${name//\//\\/}"
        fi
        sed "s/@component_name/${name}/gi" request_format/component_information.json > raw_data/get_component_info.json
        if [[ $version =~ "/" ]]; then
            # "/"가 포함된 경우, 앞에 "\" 추가
            version="${version//\//\\/}"
        fi
        sed -i "s/@component_version/${version}/gi" raw_data/get_component_info.json
        
        #get components information
        curl -X POST --data @raw_data/get_component_info.json -H "Content-Type: applicatn/json" http://172.16.30.202/api.php | jq -r '.data.cpe | select ( . != null )' > raw_data/${name}_component_cpe.txt
        cpe=$(<raw_data/${name}_component_cpe.txt)
        if [[ $cpe != "" ]]; then
            ssh obigo@172.16.30.202 /fossid/bin/fossid-cli --cpe $cpe | jq -r '.[][].cve.CVE_data_meta.ID' > raw_data/${name}_component_cve_list.txt
            while read -r cve; do
                if [[ $cve != "" ]]; then
                    echo ${name}.${version}_$cve
                    target_string=$(echo ${name}.${version}_$cve)
                    if [ ! -f "db/cve_list.txt" ]; then
                        mkdir db
                        sed "s/@scan_code/${scan_code}/gi" request_format/create_jira_issue.json > raw_data/create_jira_issue.json
                        sed -i "s/@name/${name}/gi" raw_data/create_jira_issue.json
                        sed -i "s/@version/${version}/gi" raw_data/create_jira_issue.json
                        sed -i "s/@cpe/${cpe}/gi" raw_data/create_jira_issue.json
                        sed -i "s/@cve/${cve}/gi" raw_data/create_jira_issue.json
                        result=$(curl -u aaron.cho:aaron.cho -X POST --data @raw_data/create_jira_issue.json -H "Content-Type: application/json" https://jira.obigo.com/rest/api/latest/issue/ | jq .key)
                        if [[ $result != "" ]]; then
                            echo $(date +"%Y-%m-%d %H:%M:%S") Add new CVE: $target_string to $result >> log/$(date +"%Y-%m-%d").log
                            echo $target_string >> db/cve_list.txt
                        else
                            echo $(date +"%Y-%m-%d %H:%M:%S") fail to create CVE: $target_string >> log/$(date +"%Y-%m-%d").log
                        fi
                    else
                        file_content=$(cat db/cve_list.txt)
                        if [[ $file_content =~ $target_string ]]; then
                            echo "$target_string is already handled." >> log/$(date +"%Y-%m-%d").log
                        else
                            sed "s/@scan_code/${scan_code}/gi" request_format/create_jira_issue.json > raw_data/create_jira_issue.json
                            sed -i "s/@name/${name}/gi" raw_data/create_jira_issue.json
                            sed -i "s/@version/${version}/gi" raw_data/create_jira_issue.json
                            sed -i "s/@cpe/${cpe}/gi" raw_data/create_jira_issue.json
                            sed -i "s/@cve/${cve}/gi" raw_data/create_jira_issue.json
                            result=$(curl -u aaron.cho:aaron.cho -X POST --data @raw_data/create_jira_issue.json -H "Content-Type: application/json" https://jira.obigo.com/rest/api/latest/issue/ | jq .key)
                            if [[ $result != "" ]]; then
                                echo $(date +"%Y-%m-%d %H:%M:%S") Add new CVE: $target_string to $result >> log/$(date +"%Y-%m-%d").log
                                echo $target_string >> db/cve_list.txt
                            else
                                echo $(date +"%Y-%m-%d %H:%M:%S") fail to create CVE: $target_string >> log/$(date +"%Y-%m-%d").log
                            fi
                        fi
                    fi
                fi
            done < <(cat raw_data/${name}_component_cve_list.txt)
        fi
    done < <(cat raw_data/${count}_component_lists.txt | jq -r '.[] | "\(.name) \(.version)"')
done <  raw_data/scan_lists.txt
echo -e "\n$(date +"%Y-%m-%d %H:%M:%S") check DB file\n$(cat db/cve_list.txt)" >>  log/$(date +"%Y-%m-%d").log
echo -e "$(date +"%Y-%m-%d %H:%M:%S") End to check new vulnerability for fossid\n" >> log/$(date +"%Y-%m-%d").log
